@page "/{RoomId:int}"

@using Roomz.Services;
@using Roomz.Data;

@inject ITableChangeBroadcastService ScheduleService
@implements IDisposable
@inherits OwningComponentBase<ScheduleService>

@*List of todays upcoming reservations for chosen room*@
<div class="d-flex justify-content-between">
    <div class="btn-group">
        @* Sends user to room details based on room.Id, updates Room Id + Room Name*@
        <NavLink href="@($"/0")" @onclick="@( e => UpdateRoom(0, "Alla"))" class="btn btn-dark pull-right btn-outline-info text-blue">Alla</NavLink>
    </div>
    @foreach (var roomInd in roomsList)
    {
        <div class="btn-group">
            @* Sends user to room details based on room.Id, updates Room Id + Room Name*@
            <NavLink href="@($"/{roomInd.Id}")" @onclick="@( e => UpdateRoom(roomInd.Id, roomInd.Name))" class="btn btn-dark pull-right btn-outline-info text-blue">@roomInd.Name</NavLink>
        </div>
    }
</div>

<button class="btn btn-primary" style="width:150px" @onclick="(()=> EditSchedule(schedule))">Edit</button>


@*Header with Room Id | Name (Left) and Present Time (RIGHT)*@
<div class="d-flex justify-content-between">
    <div class="p-2"><h3 class="text-info">@thisRoomId | @thisRoomName</h3></div>
    <div class="p-2"><h3 class="text-info">@DateTime.Now</h3></div>
</div>

@*List of todays upcoming reservations for chosen room*@
<table class="table table-striped table-dark">
    <thead class="thead-dark">
        <tr>
            @if (RoomId != 0)
            {
                <th scope="col"> </th>
                <th scope="col">Datum</th>
            }
            else
            {
                <th scope="col">Rum</th>
                <th scope="col">Datum</th>
            }
            <th scope="col"><br />Start</th>
            <th scope="col"><br />Slut</th>
            <th scope="col"><br />Bokare</th>
            <th scope="col"><br />Rubrik</th>
            <th scope="col"><br />Edit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var schedule in schedules)
        {
            if (RoomId == 0)
            {
                <tr>
                    <td scope="col">@schedule.RoomName</td>
                    <td scope="col">@schedule.AppointmentDateStart.ToShortDateString()</td>
                    <td scope="col">@schedule.AppointmentDateStart.ToShortTimeString()</td>
                    <td scope="col">@schedule.AppointmentDateEnd.ToShortTimeString()</td>
                    <td scope="col">@schedule.BookerEmail</td>
                    <td scope="col">@schedule.AppointmentHeading</td>
                    <td></td>
                </tr>
            }
            else
            {
                if (schedule.RoomId == RoomId)
                {
                    <tr>
                        <td scope="col"> </td>
                        <td scope="col">@schedule.AppointmentDateStart.ToShortDateString()</td>
                        <td scope="col">@schedule.AppointmentDateStart.ToShortTimeString()</td>
                        <td scope="col">@schedule.AppointmentDateEnd.ToShortTimeString()</td>
                        <td scope="col">@schedule.BookerEmail</td>
                        <td scope="col">@schedule.AppointmentHeading</td>
                        <td></td>
                    </tr>
                }
            }

        }
    </tbody>
</table>

<div class="copyright">&copy; Copyright @DateTime.Now.Year, Powered by @System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription</div>

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <EditForm Model="@objSchedule" OnValidSubmit="@ValidSubmit">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="text-info">Edit Reservation</h3>
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col-9">                                
                                <div class="row py-2">
                                    <div class="col-4">Room</div>
                                    <div class="col-8">
                                        @*<input class="form-control" type="text" @bind="@objSchedule.Room.Name" />*@
                                        <select @onchange="DateSelectionChanged" class="form-control">
                                            @foreach (var dateInd in scheduleDates)
                                            {
                                                <option value="@dateInd.AppointmentDateStart" selected="@(dateInd.Id == objSchedule.Id ? true : false)">
                                                    @dateInd.AppointmentDateStart
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="offset-4 col">
                                        <button class="btn btn-primary form-control" type="submit">Confirm</button>
                                    </div>
                                    <div class="col">
                                        @*<button class="btn btn-danger form-control" @onclick="DeleteSchedules(dtEnd)">Delete</button>*@
                                        <button class="btn btn-danger form-control" @onclick=@(() => DeleteSchedules("2020-02-07"))>DELETE</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code{
    IList<Schedule> schedules;
    List<Schedule> scheduleDates;
    Schedule objDate = new Schedule();

    Schedule objSchedule = new Schedule();

    bool ShowPopup = false;


    List<Room> roomsList;
    Room room = new Room();

    [Parameter] public int thisRoomId { get; set; } = 0;
    [Parameter] public string thisRoomName { get; set; }
    [Parameter] public string deleteScheduleDate { get; set; }

    [Parameter] public int RoomId { get; set; }

    DateTime AppStart = DateTime.Now;


    private void UpdateRoom(int _roomId, string _roomName)
    {
        thisRoomId = _roomId;
        thisRoomName = _roomName;

    }

    //void DeleteSchedule()
    //{
    //    ShowPopup = false;
    //    var result = @Service.DeleteSchedule(objSchedule);
    //    schedules.Clear();
    //    schedules = @Service.GetSchedules();
    //}

    private void DeleteSchedules(string dtEnd)
    {
        deleteScheduleDate = dtEnd;

        DateTime _dtEnd;
        if (DateTime.TryParse(dtEnd, out _dtEnd))
        {
            var result = @Service.DeleteSchedulesFromDate(_dtEnd);

            schedules.Clear();
            schedules = Service.GetSchedules();

            if (result)
            {
                this.ShouldRender();
            }
        }
    }

    //EventCallback
    protected override void OnInitialized()
    {
        //Get room name from RoomId
        room = Service.GetRoom(RoomId);
        roomsList = Service.GetRooms();

        thisRoomId = room.Id;
        thisRoomName = room.Name;

        // Subscription to table record change
        this.ScheduleService.OnScheduleChanged += this.ScheduleChanged;
        this.schedules = this.ScheduleService.GetCurrentValues();
    }

    private async void ScheduleChanged(object sender, ScheduleChangeEventArgs args)
    {
        var recordToupdate = this.schedules.FirstOrDefault(x => x.AppointmentDateStart == args.NewValue.AppointmentDateStart);
        if (recordToupdate == null)
        {
            this.schedules.Add(args.NewValue);
        }
        else
        {
            recordToupdate.AppointmentHeading = args.NewValue.AppointmentHeading;
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    void EditSchedule(Schedule schedule)
    {
        objSchedule = schedule;
        schedules = Service.GetSchedules();
        ShowPopup = true;
    }

    public void Dispose()
    {
        this.ScheduleService.OnScheduleChanged += this.ScheduleChanged;
    }
    void ClosePopup()
    {
        // Close popup
        ShowPopup = false;
    }

    void ValidSubmit()
    {
        var result = false;
        ShowPopup = false;
        //result = Service.ConfirmSchedule(objSchedule);
        //schedules = Service.GetSchedules();

        if (objSchedule.Id > 0)
        {
            result = Service.UpdateSchedule(objSchedule);
        }
        else
        {
            result = Service.CreateSchedule(objSchedule);
        }
    }

    void DateSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            objSchedule.Id = id;
        }
    }
}
